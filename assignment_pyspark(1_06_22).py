# -*- coding: utf-8 -*-
"""assignment pyspark(1/06/22).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DKxHwR_BT4zmjXvx5JwC0aj-3EX8o_DB
"""

!pip install pyspark

!pip install findspark
import findspark
findspark.init()
import pyspark
import findspark
from pyspark.sql import SparkSession
from pyspark.sql.types import Row
from pyspark.sql.functions import col

spark = SparkSession.builder.appName('Dharaneesh').getOrCreate()

raw_data= spark.read.option("header", "true").option("mode", "DROPMALFORMED").option("inferSchema", 'True').csv('/content/AppleStore.csv')

raw_data.printSchema()

"""Q1. The app size is provided to us in bytes. Create a new column 'AppSizeMbs'Convert the bytes to MB's"""

data= raw_data.withColumn("AppSizeMbs",raw_data.size_bytes/1000000)
data.show(5)

data.toPandas().head(5)

"""Q.2 List the top 20 most rated apps. Make sure to show full app name."""

data.select('app_name', 'rating_count_tot').sort(data.rating_count_tot.desc()).show(20,False)

"""Q.3 What % of the apps has multiple language support."""

data = data.toDF(*(c.replace('.', '_') for c in data.columns))
data.filter(data.lang_num > 1).count() * 100 / data.count()

"""Datasets for Q.4"""

aisles = spark.read.option("header", "true").option("inferSchema", 'True').csv("/content/aisles.csv")

departments = spark.read.option("header", "true").option("inferSchema", 'true').csv('/content/departments.csv')

products = spark.read.option("header", "true").option("inferSchema", 'True').csv("/content/products.csv")

orders = spark.read.option("header", "true").option("inferSchema", 'True').csv("/content/orders.csv")

orders_train = spark.read.option("header","true").option('inferSchema','true').csv('/content/order_products__train.csv')

"""Q4. Create a single table joining all the dataframes using common keys and print the number of observations."""

data= products.join(aisles, aisles.aisle_id == products.aisle_id,"left").drop(aisles.aisle_id).join(departments, departments.department_id == products.department_id,"left").drop(departments.department_id).join(orders_train, orders_train.product_id == products.product_id,"right").drop(orders_train.product_id).join(orders, orders.order_id == orders_train.order_id, "left").drop(orders.order_id)
data.count()

"""Q5. List the top 20 ordered products."""

data.groupBy("product_name").count().sort(col("count").desc()).show(20,False)

"""Q6. List top 20 products ordered between 8 am to 11 am."""

data.filter("order_hour_of_day >= 8 and order_hour_of_day<=11").groupBy("product_name").count().sort(col("count").desc()).show(20,False)